<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>terraform on Edd&#39;s blog</title>
    <link>/tags/terraform/</link>
    <description>Recent content in terraform on Edd&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="/tags/terraform/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Storing secrets in terraform codebase with KMS</title>
      <link>/posts/terraform-secrets-and-passwords/</link>
      <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/terraform-secrets-and-passwords/</guid>
      <description>How to store sensitive data like passwords within repo when using terraform. Simple solution for AWS users.</description>
      <content>&lt;h1 id=&#34;problem&#34;&gt;Problem&lt;/h1&gt;
&lt;p&gt;Some terraform resources require passing sensitive data such as passwords and ssh keys.
When runing operation within a team, this quickly becomes a problem.
Git is a decentralized way of storing data and having your passwords in plaintext is a sub-optimal idea.
Even when using private git repositories, you still have passwords on each machine that has access to the repo.
The approach I suggest is tested within mid/big AWS environment.
It has some overhead, but I tried to reduce it to a minimum.&lt;/p&gt;
&lt;h1 id=&#34;kms&#34;&gt;KMS&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/kms/&#34;&gt;AWS KMS&lt;/a&gt; is conceptually a private key that is bound to IAM.
It is quite convinient in a lot use cases.
Here you can utilize it, to store sensitive data within terraform code.
You can provision your first KMS with &lt;a href=&#34;https://www.terraform.io/docs/providers/aws/r/kms_key.html&#34;&gt;terraform as well&lt;/a&gt;.
Each KMS has it&amp;rsquo;s own unique key id that you use to encrypt your secrets.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ aws kms encrypt --key-id &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;KEY_ID&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; --plaintext &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;YOUR_SECRET&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; --output text --query CiphertextBlob

AQICANlZ&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;....&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;iqI75UTD9MqqkyzCrbkkQ&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output is encrypted version of your secret that can be stored in git repository.&lt;/p&gt;
&lt;h1 id=&#34;kms-data-provider&#34;&gt;KMS data provider&lt;/h1&gt;
&lt;p&gt;Once you know how to create KMS key and encrypt secrets, you can ingest them into other terraform resources.
To do, it use &lt;a href=&#34;https://www.terraform.io/docs/providers/aws/d/kms_secrets.html&#34;&gt;aws_kms_secrets&lt;/a&gt; data provider.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-terraform&#34; data-lang=&#34;terraform&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aws_kms_secrets&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;secrets&amp;#34;&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;secret&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master-password&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AQECAHgaPa0J8WadplGCqqVAr4H....&amp;#34;&lt;/span&gt;
  }
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;master_password&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;data.&lt;span style=&#34;color:#a6e22e&#34;&gt;aws_kms_secrets&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;secrets&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;plaintext&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master-password&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Data provider does the decryption.
You don&amp;rsquo;t need to provide the key id because it is already a part of the encrypted text.
When calling terraform, provide AWS credentials that are allowed to decrypt given secret.
There is a &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html&#34;&gt;number of ways to do it&lt;/a&gt;.
I recommend using &lt;code&gt;AWS_PROFILE&lt;/code&gt; env variable as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ AWS_PROFILE=myprofile terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Again, myprofile IAM user needs to have access to decryption within a given key.
&lt;a href=&#34;https://docs.aws.amazon.com/kms/latest/developerguide/iam-policies.html#iam-policy-example-encrypt-decrypt-specific-cmks&#34;&gt;AWS has that documented as well&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;secrets-manager&#34;&gt;Secrets manager.&lt;/h1&gt;
&lt;p&gt;AWS also has a service &lt;a href=&#34;https://aws.amazon.com/secrets-manager/&#34;&gt;AWS Secrets Manager&lt;/a&gt;.
It is richer in features than KMS and terraform also &lt;a href=&#34;https://www.terraform.io/docs/providers/aws/r/secretsmanager_secret.html&#34;&gt;covers it&lt;/a&gt;.
You can specify password rotation policies and group passwords together.
The reason why I don&amp;rsquo;t like this approach is that changes in your secrets are not visibile in git.
This makes harder to track what changed and who made the change.
The solution also feels too complex for my day-to-day needs.&lt;/p&gt;
&lt;h1 id=&#34;terraform-state&#34;&gt;Terraform state&lt;/h1&gt;
&lt;p&gt;While your secrets are no longer in the terraform codebase, they are present in the plaintext form in the state file.
If the state is stored in the git as well, entire approach with KMS is next to useless.
State file contains full information on the &lt;code&gt;aws_kms_secrets&lt;/code&gt; data provider.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data.aws_kms_secrets.secrets&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aws_kms_secrets&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;depends_on&amp;#34;&lt;/span&gt;: [],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;primary&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{date}&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;attributes&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{date}&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;plaintext.%&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;plaintext.master_password&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PLAINTEXT_SECRET&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;secret.#&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;secret.3421790129.context.%&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;secret.3421790129.grant_tokens.#&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;secret.3421790129.name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master_password&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;secret.3421790129.payload&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AQICAHjxiIlAeQ/[...]&amp;#34;&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;meta&amp;#34;&lt;/span&gt;: {},
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tainted&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;deposed&amp;#34;&lt;/span&gt;: [],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;provider&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;provider.aws&amp;#34;&lt;/span&gt;
}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Luckily, you can store the state file outside the git repo &lt;a href=&#34;https://www.terraform.io/docs/backends/types/s3.html&#34;&gt;on s3 bucket&lt;/a&gt;.
I will write a separate post on storing the state with safe locking mechanisms.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Terraform production ready project structure</title>
      <link>/posts/terraform-project-structure/</link>
      <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/terraform-project-structure/</guid>
      <description>How to organise terrafrom project structure with terragrunt.</description>
      <content>&lt;p&gt;&lt;a href=&#34;https://www.terraform.io/intro/index.html&#34;&gt;Terraform&lt;/a&gt; is becoming a standard in managing a infrastructure as code.
List of &lt;a href=&#34;https://www.terraform.io/docs/providers/index.html&#34;&gt;providers&lt;/a&gt; is growing like never before.
It is fairly easy to drink too much cool-aid.
While it is a very powerful tool, it has limitations.
Some of them can be solved easily, some require obscure hacks.
Terraform is relatively young and it misses some critical tooling, that you need to create on your own.
In this post I will show how to &lt;em&gt;structure&lt;/em&gt; a terraform code base to manage multiple environments.
Most of the solutions revolve around &lt;a href=&#34;https://github.com/gruntwork-io/terragrunt&#34;&gt;terragrunt&lt;/a&gt;.
It is a thin wrapper for Terraform that provides extra tools for working with multiple Terraform modules.&lt;/p&gt;
&lt;h2 id=&#34;terraform-up-and-running&#34;&gt;Terraform up and running&lt;/h2&gt;
&lt;p&gt;If you have not read &lt;a href=&#34;https://www.terraformupandrunning.com/&#34;&gt;terraform up and running&lt;/a&gt; book, do it.
Even if you think you know how to use terraform.
The most important chapter are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to manage terraform state&lt;/li&gt;
&lt;li&gt;Creating reusable modules&lt;/li&gt;
&lt;li&gt;How to use terraform as a team&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will cover some of these issues in this post as well.&lt;/p&gt;
&lt;h2 id=&#34;modules-and-pins&#34;&gt;Modules and pins&lt;/h2&gt;
&lt;p&gt;Any sane company has more than one environment.
Usually it looks like: &lt;code&gt;production, staging, dev&lt;/code&gt;.
Environments come and go, change over time.
If you manage them, one of your goals is to keep in them aligned.
Have some key parameters such as instance types, volume sizes different.
The architecture should stay the same.
Updating set of clusters should be as easy as updating a single one.&lt;/p&gt;
&lt;p&gt;To avoid code duplication use &lt;a href=&#34;https://www.terraform.io/docs/configuration/modules.html&#34;&gt;terraform modules&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This way you can reuse the code you write across multiple environments.
Terraform documentation is pretty good at explaining what they are, so I won&amp;rsquo;t be writing much about it here.
What you should be aware of is that modules can be &lt;em&gt;Pinned&lt;/em&gt; to a specific version.
Meaning, when you provide source, it can be git repository url with a &lt;code&gt;ref&lt;/code&gt; tag specified.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-terraform&#34; data-lang=&#34;terraform&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vpc&amp;#34;&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git::https://example.com/vpc.git?ref=v1.2.0&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This way you can gradually upgrade your clusters by upgrading from dev to staging and later to prod.
Real question is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am supposed to manage my entire cluster with a single module or use multiple ones?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Having a global module per cluster might not be a terrible idea if your infrastructure is fairly simple.
If you grow in complexity, you want to separate modules and their instantiation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If something goes wrong, it goes wrong in the entire cluster.&lt;/li&gt;
&lt;li&gt;You can do only one change on the cluster in parallel. If you use &lt;a href=&#34;https://www.terraform.io/docs/state/locking.html&#34;&gt;state locking&lt;/a&gt; it will result in an error. If not, risk of damaging the cluster state is quite big.&lt;/li&gt;
&lt;li&gt;You risk creating modules that are hard to reason about. This is the same antipattern as creating a single class to manage entire project.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;project-structure-with-fine-grained-modules&#34;&gt;Project structure with fine grained modules&lt;/h2&gt;
&lt;p&gt;If you are using cloud provider such as AWS or Google Cloud, you know that resources are created &amp;ldquo;per&amp;rdquo; anything.
For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IAM users or s3 buckets are global at the account level&lt;/li&gt;
&lt;li&gt;ECR repos are created per region&lt;/li&gt;
&lt;li&gt;RDS, ECS clusters are per VPC/cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we need to be able to create resources per cluster/environment, but also some globally shared resources among clusters.
With terragrunt you can &lt;a href=&#34;https://github.com/gruntwork-io/terragrunt#motivation&#34;&gt;can create a tree structure&lt;/a&gt; that will describe your needs.
In my case, nested level are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aws account&lt;/li&gt;
&lt;li&gt;aws region&lt;/li&gt;
&lt;li&gt;cluster name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each one of these levels can have their own &lt;code&gt;_global&lt;/code&gt; directory, that will hold global state per &lt;code&gt;account/region/cluster&lt;/code&gt;.
The directory structure for my terraform code looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tree -d -L 3
├── dev
│   ├── _global
│   ├── ap-southeast-2
│   │   ├── _global
│   │   ├── mgmt
│   │   └── dev
│   └── eu-west-1
│       ├── _global
│       ├── mgmt
│       ├── staging
│       ├── dev1
│       └── dev2
└── prod
    ├── _global
    ├── ap-southeast-2
    │   ├── _global
    │   ├── prod
    │   └── mgmt
    └── us-east-1
        ├── _global
        ├── prod
        └── mgmt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Each directory here creates a workspace where given terraform modules can be instantiated.
Hierarchy allows customization on any level with variables propagating to lower levels to avoid duplication.&lt;/p&gt;
&lt;p&gt;As mentioned, some modules get provisioned per cluster. Grouping is per &lt;code&gt;data-stores, networking, services&lt;/code&gt; etc.
Structure for a specific &lt;em&gt;dev1&lt;/em&gt; cluster.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tree -d -L 3
dev1
├── data-stores
│   ├── rds-db
│   ├── rds-other-db
│   └── s3-buckets
├── kms-key
├── logging
├── networking
│   ├── albs
│   └── route53
├── services
│   ├── service1
│   ├── service2
│   ├── service3
│   ├── service4
│   └── ecs-cluster
└── vpc
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;terragrunt-module-instantiation&#34;&gt;Terragrunt module instantiation&lt;/h2&gt;
&lt;p&gt;Each directory we listed so far contain single &lt;code&gt;*.tfvars&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls dev/eu-west-1/dev1/services/service1/
terraform.tfvars
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This file provisions a given terraform module&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terragrunt = {
  terraform {
    source = &amp;quot;git::git@github.com:github-account/repo-name.git//services/service1?ref=given-tag&amp;quot;
  }
  include = {
    path = &amp;quot;${find_in_parent_folders()}&amp;quot;
  }
  dependencies = {
    paths = [&amp;quot;../ecs-cluster&amp;quot;]
  }
}

cpu                       = 128
memory                    = 200
desired_number_of_tasks   = 2
alb_listener_custom_rules = [
  {
    port     = 443,
    path     = &amp;quot;/*&amp;quot;,
    host     = &amp;quot;foo.com&amp;quot;,
    priority = 250,
  },
  {
    port     = 80,
    path     = &amp;quot;/*&amp;quot;,
    host     = &amp;quot;foo.com&amp;quot;,
    priority = 251,
  }
]

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the snippet above you can see &lt;code&gt;terragrunt&lt;/code&gt; bracket block that describes the module to setup.
Outside brackets are variables passed into the module.
There is &lt;a href=&#34;https://github.com/gruntwork-io/terragrunt#motivation-2&#34;&gt;a lot you can customize for terragrunt configuration&lt;/a&gt;.
You can pass env variables, arguments to terraform, add tfvar files&lt;/p&gt;
&lt;h3 id=&#34;propagating-variables-from-higher-levels&#34;&gt;Propagating variables from higher levels&lt;/h3&gt;
&lt;p&gt;There are variables that are constant at some level and you don&amp;rsquo;t want to replicate them.
For example, when you use multiple aws accounts, you have to name them and keep the name consistent.
For this you can define &lt;code&gt;account.tfvars&lt;/code&gt; file with contents like bellow.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws_account_name = &amp;quot;dev&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This variable should be automatically passed to any terraform module that gets created in directory lower in hierarchy.
This doesn&amp;rsquo;t happen automatically though.
In the snippet above each module gets created with &lt;a href=&#34;https://github.com/gruntwork-io/terragrunt#find_in_parent_folders&#34;&gt;find_in_parent_folders&lt;/a&gt;.
This causes terragrunt to search &lt;code&gt;*tfvars&lt;/code&gt; files higher in the directory structure.
Lets create a &lt;code&gt;terraform.tfvars&lt;/code&gt; file at the root (account level) of the hierarchy.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terragrunt = {
  terraform {
    extra_arguments &amp;quot;common_vars&amp;quot; {
      commands = [&amp;quot;${get_terraform_commands_that_need_vars()}&amp;quot;]
      optional_var_files = [
        &amp;quot;${get_tfvars_dir()}/${find_in_parent_folders(&amp;quot;account.tfvars&amp;quot;, &amp;quot;skip-account-if-does-not-exist&amp;quot;)}&amp;quot;,
        &amp;quot;${get_tfvars_dir()}/${find_in_parent_folders(&amp;quot;region.tfvars&amp;quot;, &amp;quot;skip-region-if-does-not-exist&amp;quot;)}&amp;quot;,
        &amp;quot;${get_tfvars_dir()}/${find_in_parent_folders(&amp;quot;env.tfvars&amp;quot;, &amp;quot;skip-env-if-does-not-exist&amp;quot;)}&amp;quot;,
        &amp;quot;${get_tfvars_dir()}/terraform.tfvars&amp;quot;
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This file will cause terragrunt to include &lt;code&gt;account.tfvars&lt;/code&gt;, &lt;code&gt;region.tfvars&lt;/code&gt;, &lt;code&gt;env.tfvars&lt;/code&gt; when needed.
This way, variable &lt;code&gt;aws_account_name&lt;/code&gt; doesn&amp;rsquo;t have to copy-pasted each time when it is needed.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;If you want to organize your terraform project as shown, check out &lt;a href=&#34;https://github.com/gruntwork-io/terragrunt#keep-your-terraform-code-dry&#34;&gt;terragrunt docs on keeping the code DRY&lt;/a&gt;.
If you have any questions or need help, don&amp;rsquo;t be afraid to ask in the comments :)&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
