<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Edd&#39;s blog</title>
    <link>/</link>
    <description>Recent content on Edd&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Storing secrets in terraform codebase with KMS</title>
      <link>/posts/terraform-secrets-and-passwords/</link>
      <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/terraform-secrets-and-passwords/</guid>
      <description>How to store sensitive data like passwords within repo when using terraform. Simple solution for AWS users.</description>
      <content>&lt;h1 id=&#34;problem&#34;&gt;Problem&lt;/h1&gt;
&lt;p&gt;Some terraform resources require passing sensitive data such as passwords and ssh keys.
When runing operation within a team, this quickly becomes a problem.
Git is a decentralized way of storing data and having your passwords in plaintext is a sub-optimal idea.
Even when using private git repositories, you still have passwords on each machine that has access to the repo.
The approach I suggest is tested within mid/big AWS environment.
It has some overhead, but I tried to reduce it to a minimum.&lt;/p&gt;
&lt;h1 id=&#34;kms&#34;&gt;KMS&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/kms/&#34;&gt;AWS KMS&lt;/a&gt; is conceptually a private key that is bound to IAM.
It is quite convinient in a lot use cases.
Here you can utilize it, to store sensitive data within terraform code.
You can provision your first KMS with &lt;a href=&#34;https://www.terraform.io/docs/providers/aws/r/kms_key.html&#34;&gt;terraform as well&lt;/a&gt;.
Each KMS has it&amp;rsquo;s own unique key id that you use to encrypt your secrets.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ aws kms encrypt --key-id &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;KEY_ID&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; --plaintext &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;YOUR_SECRET&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; --output text --query CiphertextBlob

AQICANlZ&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;....&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;iqI75UTD9MqqkyzCrbkkQ&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output is encrypted version of your secret that can be stored in git repository.&lt;/p&gt;
&lt;h1 id=&#34;kms-data-provider&#34;&gt;KMS data provider&lt;/h1&gt;
&lt;p&gt;Once you know how to create KMS key and encrypt secrets, you can ingest them into other terraform resources.
To do, it use &lt;a href=&#34;https://www.terraform.io/docs/providers/aws/d/kms_secrets.html&#34;&gt;aws_kms_secrets&lt;/a&gt; data provider.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-terraform&#34; data-lang=&#34;terraform&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aws_kms_secrets&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;secrets&amp;#34;&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;secret&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master-password&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AQECAHgaPa0J8WadplGCqqVAr4H....&amp;#34;&lt;/span&gt;
  }
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;master_password&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;data.&lt;span style=&#34;color:#a6e22e&#34;&gt;aws_kms_secrets&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;secrets&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;plaintext&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master-password&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Data provider does the decryption.
You don&amp;rsquo;t need to provide the key id because it is already a part of the encrypted text.
When calling terraform, provide AWS credentials that are allowed to decrypt given secret.
There is a &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html&#34;&gt;number of ways to do it&lt;/a&gt;.
I recommend using &lt;code&gt;AWS_PROFILE&lt;/code&gt; env variable as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ AWS_PROFILE=myprofile terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Again, myprofile IAM user needs to have access to decryption within a given key.
&lt;a href=&#34;https://docs.aws.amazon.com/kms/latest/developerguide/iam-policies.html#iam-policy-example-encrypt-decrypt-specific-cmks&#34;&gt;AWS has that documented as well&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;secrets-manager&#34;&gt;Secrets manager.&lt;/h1&gt;
&lt;p&gt;AWS also has a service &lt;a href=&#34;https://aws.amazon.com/secrets-manager/&#34;&gt;AWS Secrets Manager&lt;/a&gt;.
It is richer in features than KMS and terraform also &lt;a href=&#34;https://www.terraform.io/docs/providers/aws/r/secretsmanager_secret.html&#34;&gt;covers it&lt;/a&gt;.
You can specify password rotation policies and group passwords together.
The reason why I don&amp;rsquo;t like this approach is that changes in your secrets are not visibile in git.
This makes harder to track what changed and who made the change.
The solution also feels too complex for my day-to-day needs.&lt;/p&gt;
&lt;h1 id=&#34;terraform-state&#34;&gt;Terraform state&lt;/h1&gt;
&lt;p&gt;While your secrets are no longer in the terraform codebase, they are present in the plaintext form in the state file.
If the state is stored in the git as well, entire approach with KMS is next to useless.
State file contains full information on the &lt;code&gt;aws_kms_secrets&lt;/code&gt; data provider.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data.aws_kms_secrets.secrets&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aws_kms_secrets&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;depends_on&amp;#34;&lt;/span&gt;: [],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;primary&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{date}&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;attributes&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{date}&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;plaintext.%&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;plaintext.master_password&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PLAINTEXT_SECRET&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;secret.#&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;secret.3421790129.context.%&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;secret.3421790129.grant_tokens.#&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;secret.3421790129.name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master_password&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;secret.3421790129.payload&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AQICAHjxiIlAeQ/[...]&amp;#34;&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;meta&amp;#34;&lt;/span&gt;: {},
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tainted&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;deposed&amp;#34;&lt;/span&gt;: [],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;provider&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;provider.aws&amp;#34;&lt;/span&gt;
}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Luckily, you can store the state file outside the git repo &lt;a href=&#34;https://www.terraform.io/docs/backends/types/s3.html&#34;&gt;on s3 bucket&lt;/a&gt;.
I will write a separate post on storing the state with safe locking mechanisms.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Peaks in pandas Time Series.</title>
      <link>/posts/finding-local-extreams-in-pandas-time-series/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/finding-local-extreams-in-pandas-time-series/</guid>
      <description>How to find peaks in pandas time series.</description>
      <content>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;When processing time series in pandas, I found it quite hard to find local minima and maxima within a DataFrame.
Even when knowing the &lt;a href=&#34;https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.argrelextrema.html&#34;&gt;correct function from scipy&lt;/a&gt;, taking correct results is still hard.
Doing it effeciently is even harder.
I found a partially correct answer on &lt;a href=&#34;https://stackoverflow.com/questions/48023982/pandas-finding-local-max-and-min/50836425#50836425&#34;&gt;stackoverflow&lt;/a&gt; and expand it here to provide the correct answer with examples.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;
&lt;p&gt;First we need data to work on.
I am importing a historical set of ethereum transactions.
To make things simple, I resample the DataFrame to daily set and leave only price column.
Notice that you can parse dates on the fly when parsing the CSV, even with custom callback function.
The next plot presents the data loaded.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#75715e&#34;&gt;# This makes plots prettier&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; seaborn; seaborn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set()
&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;matplotlib inline

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dateparse&lt;/span&gt; (time_in_secs):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromtimestamp(float(time_in_secs))

df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;../csvs/ethusd.csv&amp;#39;&lt;/span&gt;, index_col&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;, parse_dates&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, date_parser&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dateparse)
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resample(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean()
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;price&amp;#39;&lt;/span&gt;]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;                 price
date
2019-01-17  122.002639
2019-01-18  120.840360
2019-01-19  123.167901
2019-01-20  119.378474
2019-01-21  116.331089
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;price&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/images/maxmin/output_2_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;finding-indexes-for-extreams-with-scipy-and-argrelextrema&#34;&gt;Finding indexes for extreams with scipy and argrelextrema&lt;/h3&gt;
&lt;p&gt;Scipy provides a &lt;a href=&#34;https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.argrelextrema.html&#34;&gt;argrelextreama function&lt;/a&gt; that does a LOT of heavy lifting in this problem.
The actual implementation &lt;a href=&#34;https://github.com/scipy/scipy/blob/v1.3.0/scipy/signal/_peak_finding.py#L66&#34;&gt;can be found here&lt;/a&gt;.
The result is an numpy array of indexes that are the peaks.
So in essence, &lt;code&gt;argrelextreama&lt;/code&gt; returns &lt;code&gt;ilocs&lt;/code&gt; of the DataFrame.
If you are fuzzy on what iloc means it is a &lt;em&gt;Purely integer-location based indexing for selection by position.&lt;/em&gt;
In order to get prices that are the peaks you can use &lt;code&gt;df.iloc&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Note, that &lt;code&gt;order&lt;/code&gt; in &lt;code&gt;argrelextreama&lt;/code&gt; means a range from both sides.
We have daily data, so &lt;code&gt;order=3&lt;/code&gt; means &lt;code&gt;+-3days&lt;/code&gt; - weekly peaks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; scipy.signal &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; argrelextrema
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

&lt;span style=&#34;color:#75715e&#34;&gt;# first argument can a multidimentional np array as&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# data : ndarray&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Array in which to find the relative extrema.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This is reflected in what gets returned:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Returns&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    -------&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    extrema : ndarray&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#        Boolean array of the same shape&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# That is why at the end of the line we just take the first element&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# order: How many points on each side to use for the comparison to consider&lt;/span&gt;
ilocs_min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argrelextrema(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;price&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values, np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;less_equal, order&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
ilocs_max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argrelextrema(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;price&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values, np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;greater_equal, order&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;price&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), alpha&lt;span style=&#34;color:#f92672&#34;&gt;=.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# filter prices that are peaks and plot them differently to be visable on the plot&lt;/span&gt;
df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[ilocs_max]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;price&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, lw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;, marker&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v&amp;#34;&lt;/span&gt;);
df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[ilocs_min]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;price&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, lw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;, marker&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/images/maxmin/output_3_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;how-to-update-dataframe-with-found-peaks&#34;&gt;How to update DataFrame with found peaks&lt;/h3&gt;
&lt;p&gt;Now that we know how to get the peaks in the time series, it is time to learn how to include the results in the DataFrame.
The naive approach would be to use &lt;code&gt;iloc&lt;/code&gt; and combine with filtering.
It would be not only very slow (for bigger datasets) but also would not work.
Snippet bellow shows that approach.
Notice that, you get a warning, but no errors nor exceptions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html&lt;/span&gt;
df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weekly_max&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weekly_min&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[ilocs_min][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weekly_min&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[ilocs_max][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weekly_max&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
&lt;span style=&#34;color:#75715e&#34;&gt;# this will return empty DataFrame, which is not what we wanted.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weekly_min&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; True])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Empty DataFrame
Columns: [price, weekly_max, weekly_min]
Index: []


/Users/ed/.local/share/virtualenvs/data-saE_DZ1J/lib/python3.6/site-packages/ipykernel_launcher.py:4: SettingWithCopyWarning:
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy
  after removing the cwd from sys.path.
/Users/ed/.local/share/virtualenvs/data-saE_DZ1J/lib/python3.6/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning:
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy
  &amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The warning is quite verbose.
The key here is: &lt;em&gt;A value is trying to be set on a copy of a slice from a DataFrame.&lt;/em&gt;.
Good explanation of this can be found &lt;a href=&#34;https://stackoverflow.com/a/20627316/1366719&#34;&gt;on stackoverflow&lt;/a&gt; and &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy&#34;&gt;pandas documentation&lt;/a&gt;.
Warning suggests using &lt;em&gt;.loc[row_indexer,col_indexer] = value&lt;/em&gt;, which is what is shown in the snippet bellow.
Note, that &lt;code&gt;row_indexer&lt;/code&gt; means an index. To transform list of &lt;code&gt;ilocs&lt;/code&gt; to the index, use: &lt;code&gt;df.iloc[ilocs_min].index&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weekly_max&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weekly_min&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[ilocs_min]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weekly_min&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[ilocs_max]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weekly_max&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
&lt;span style=&#34;color:#75715e&#34;&gt;# display prices that are minimums and maximums&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weekly_min&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weekly_max&amp;#39;&lt;/span&gt;]])
df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;price&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), alpha&lt;span style=&#34;color:#f92672&#34;&gt;=.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
df[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weekly_max&amp;#39;&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;price&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, lw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;, marker&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v&amp;#34;&lt;/span&gt;);
df[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weekly_min&amp;#39;&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;price&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, lw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;, marker&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;                 price  weekly_max  weekly_min
date
2019-01-19  123.167901        True       False
2019-01-29  104.371118       False        True
2019-02-03  107.372949        True       False
2019-02-06  102.280320       False        True
2019-02-19  145.809688        True       False
2019-02-23  153.401689        True       False
2019-03-04  126.320644       False        True
2019-03-07  137.093550        True       False
2019-03-14  131.361888       False        True
2019-03-16  140.445883        True       False
2019-03-26  132.669041       False        True
2019-04-03  170.548572        True       False
2019-04-08  179.932684        True       False
2019-04-16  163.505072       False        True
2019-04-20  174.206577        True       False
2019-04-26  151.879252       False        True
2019-05-07  174.703111        True       False
2019-05-16  260.186439        True       False
2019-05-21  254.475075        True       False
2019-05-23  239.937994       False        True
2019-05-30  271.248413        True       False
2019-05-31  255.605779       False        True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Plot generated from updated DataFrame is the same as the one created by &lt;code&gt;df.iloc[ilocs_max].price.plot()&lt;/code&gt;. This is a good confirmation that DataFrame has been updated properly.
&lt;img src=&#34;/images/maxmin/output_5_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;I hope it helped you and saved you some time. Cheers!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Linking Elixir processes together</title>
      <link>/posts/links-in-elixir/</link>
      <pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/posts/links-in-elixir/</guid>
      <description>You are familiar with basic concept of Elixir/Erlang processes and you want to take a step further.</description>
      <content>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;If you actually don&amp;rsquo;t know much about Elixir processes but you already learned something about Elixir checkout [my post about processes]({% post_url 2015-10-22-elixir-pingpong-table %}) and come back afterwords. I assume that you know how &lt;strong&gt;spawn/1&lt;/strong&gt; and &lt;strong&gt;spawn/3&lt;/strong&gt; work and you know basic concepts around process communication.&lt;/p&gt;
&lt;h2 id=&#34;connecting-processes-together&#34;&gt;Connecting processes together.&lt;/h2&gt;
&lt;p&gt;It is very common that processes are somehow related to each other, we also know that they do not share state. Right now you should be asking: &lt;strong&gt;&amp;ldquo;How to make sure that life of process depends on another?&amp;quot;&lt;/strong&gt;. Erlang provides mechanism called linking. In Elixir we can use it by calling &lt;strong&gt;spawn_link&lt;/strong&gt;. Let&amp;rsquo;s check what docs have to say about that function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; spawn_link(fun)

&lt;span style=&#34;color:#a6e22e&#34;&gt;Spawns&lt;/span&gt; the given function, links it to the current process &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; returns its pid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;Check&lt;/span&gt; the &lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt; modules &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; other functions to handle processes,
including spawning functions &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;Inlined&lt;/span&gt; by the compiler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;Examples&lt;/span&gt;

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;┃&lt;/span&gt; current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self()
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;┃&lt;/span&gt; child   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; spawn_link(&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; send current, {self(), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;┃&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;┃&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;┃&lt;/span&gt;   {&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;child, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received 3 back&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;┃&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In my opinion, that description is quite vage, so let&amp;rsquo;s put to the test.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; child   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; spawn_link(&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; send current, {self(), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.65.0&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
...(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;   {&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;child, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received 3 back&amp;#34;&lt;/span&gt;
...(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Received&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; back
&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We received 3, which is OK, but&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: what if we call spawn instead of spawn_link?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self()
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.57.0&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; child   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; spawn(&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; send current, {self(), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.60.0&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
...(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;   {&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;child, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received 3 back&amp;#34;&lt;/span&gt;
...(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Received&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; back
&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Q: The result is exactly the same, so what is the exact purpose of &lt;strong&gt;spawn_link&lt;/strong&gt; then?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A: The answer is: &amp;ldquo;Error handling&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or to be more specific: &amp;ldquo;spawn_link will notify linked process about abnormal exit reason for the dependent process&amp;rdquo;. But before going any deeper we need to really understand what actually happens when process finishes its work.&lt;/p&gt;
&lt;h2 id=&#34;when-process-ends&#34;&gt;When process ends&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/images/meme_oracle_happens_for_a_reason.jpg&#34; alt=&#34;oracle matrix meme&#34;&gt;
When a process finishes its work, it exits. It is a different mechanism than exceptions and with it we can detect when something wrong (or unexpected) happens. When process finishes its work it implicitly calls &lt;strong&gt;exit(:normal)&lt;/strong&gt; to communicate with its parent that job has been done. Every other argument to exit/1 than &lt;strong&gt;:normal&lt;/strong&gt; is treated as an error. You should also know that Elixir shell is a process as well, so you should be able to link to it as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; spawn_link(&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; exit(&lt;span style=&#34;color:#e6db74&#34;&gt;:normal&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.104.0&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; spawn(&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; exit(&lt;span style=&#34;color:#e6db74&#34;&gt;:normal&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.106.0&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So far there are no changes between &lt;strong&gt;spawn/1&lt;/strong&gt; and &lt;strong&gt;spawn_link/1&lt;/strong&gt;, that is because we exit the process with &lt;strong&gt;:normal&lt;/strong&gt; reason. But what would happen for other reasons?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;{iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; spawn(&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; exit(&lt;span style=&#34;color:#e6db74&#34;&gt;:oh_no_i_did_something_wrong&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.114.0&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; spawn_link(&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; exit(&lt;span style=&#34;color:#e6db74&#34;&gt;:oh_no_i_did_something_wrong&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;EXIT&lt;/span&gt; from &lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.112.0&amp;gt;) :oh_no_i_did_something_wrong&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;Interactive&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Elixir&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; press &lt;span style=&#34;color:#a6e22e&#34;&gt;Ctrl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt; to exit (type h() &lt;span style=&#34;color:#a6e22e&#34;&gt;ENTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; help)
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;BINGO! Our shell processes does not catch &lt;strong&gt;:EXIT&lt;/strong&gt; message, so link propagates the exit reason further to the process that observers elixir shell. The &amp;ldquo;observer&amp;rdquo; catches the error and restarts the shell process. But how to actually handle exit messages from linked processes?&lt;/p&gt;
&lt;h2 id=&#34;trapping-exists&#34;&gt;Trapping exists&lt;/h2&gt;
&lt;p&gt;Now that we know how to track exits from linked processes, the question is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: How to actually react to failures of linked processes?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A: trap_exit&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Each process can be flagged, meaning you can customize its properties like minimal heap size, priority level, &lt;strong&gt;trapping&lt;/strong&gt; and many more advanced things. &lt;a href=&#34;http://www.erlang.org/doc/man/erlang.html#process_flag-2&#34;&gt;Erlang&amp;rsquo;s documentation lists them all&lt;/a&gt;. The most interesting part is this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Setting trapping flag to true means that, exit signals arriving to a process are converted to &lt;strong&gt;{&amp;lsquo;EXIT&amp;rsquo;, from, reason}&lt;/strong&gt; messages, which can be received as ordinary messages. If trap_exit is set to false, the process exits if it receives an exit signal other than normal and the exit signal is propagated to its linked processes. Application processes should normally not trap exits.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So setting trapping flag is not a common thing, it is because OTP from Erlang provides special building blocks for managing failures of other processes - &lt;strong&gt;supervisors&lt;/strong&gt;. I will describe them in the next blog post, but for the time being we will go against the wind which is what curious programmers like most. Let&amp;rsquo;s start with trapping exists from linked processes by setting the proper flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flag(&lt;span style=&#34;color:#e6db74&#34;&gt;:trap_exit&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As it is said in the description, returned value is &lt;strong&gt;false&lt;/strong&gt; which is a previous state of that flag. If you called it again it would return true. Now that we have trapping enabled let&amp;rsquo;s link to the process which calculates 1 + 1 and finishes its work. We call flush afterwords to receive incoming messages to the shell process.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; spawn_link(&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.145.0&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; flush
{&lt;span style=&#34;color:#e6db74&#34;&gt;:EXIT&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.145.0&amp;gt;, :normal}&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Spawned process sends us &lt;strong&gt;{:EXIT, #PID&amp;lt;0.145.0&amp;gt;, :normal}&lt;/strong&gt;. This means that process finishes its work without any problems. Now, let&amp;rsquo;s replicate that behavior more explicitly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; spawn_link(&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; exit(&lt;span style=&#34;color:#e6db74&#34;&gt;:normal&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.164.0&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; flush
{&lt;span style=&#34;color:#e6db74&#34;&gt;:EXIT&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.164.0&amp;gt;, :normal}&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s try to exit the process with a message different then normal.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; spawn_link(&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; exit(&lt;span style=&#34;color:#e6db74&#34;&gt;:custom_reason&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.167.0&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; flush
{&lt;span style=&#34;color:#e6db74&#34;&gt;:EXIT&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.167.0&amp;gt;, :custom_reason}&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Great, we intercept exit call and statement such as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  {&lt;span style=&#34;color:#e6db74&#34;&gt;:EXIT&lt;/span&gt;, pid, reason} &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; here we could react
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;gives us a way to react to processes exits. But what about exceptions? They cause processes to die too!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; spawn_link(&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uuuuups!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.174.0&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14.246&lt;/span&gt; [error] &lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.174.0&amp;gt; raised an exception&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;RuntimeError&lt;/span&gt;) uuuuups!
    &lt;span style=&#34;color:#e6db74&#34;&gt;:erlang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; flush
{&lt;span style=&#34;color:#e6db74&#34;&gt;:EXIT&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.174.0&amp;gt;,&lt;/span&gt;
 {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;%&lt;span style=&#34;color:#a6e22e&#34;&gt;RuntimeError&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;message&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uuuuups!&amp;#34;&lt;/span&gt;}, [{&lt;span style=&#34;color:#e6db74&#34;&gt;:erlang&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:apply&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, []}]}}
&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Great, exceptions are trapped as well. We could react to them during processes exists.&lt;/p&gt;
&lt;h2 id=&#34;visualizing-links&#34;&gt;Visualizing links&lt;/h2&gt;
&lt;p&gt;Now that we have some knowledge about links, i&amp;rsquo;ll show a visualization of simple demo. LinksTest module creates a chain of linked processes and then tracks their exits.&lt;/p&gt;
&lt;p&gt;Here is the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LinksTest&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; chain &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chain called with 0, wating 2000 ms before exit&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;:timer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;)
    exit(&lt;span style=&#34;color:#e6db74&#34;&gt;:chain_breaks_here&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; chain n &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flag(&lt;span style=&#34;color:#e6db74&#34;&gt;:trap_exit&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chain called with &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;n&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;:timer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
    spawn_link(__MODULE__, &lt;span style=&#34;color:#e6db74&#34;&gt;:chain&lt;/span&gt;, [n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      {&lt;span style=&#34;color:#e6db74&#34;&gt;:EXIT&lt;/span&gt;, pid, reason} &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;:timer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;)
        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Child process exits with reason &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;reason&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is the demo&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/process_chain.gif&#34; alt=&#34;chain demo&#34;&gt;&lt;/p&gt;
&lt;p&gt;The interesting fact is that after exit with &lt;strong&gt;:chain_breaks_here&lt;/strong&gt;, next exists are :normal. It is because the first process that catches :chain_breaks_here exit code consumes it and then exits normally, so the error is swallowed by the first process that catches it. If we didn&amp;rsquo;t trap exits in the chain and exit in the last process normally (:normal), the process would not exit at all - links prevent this. In other words: &lt;strong&gt;When calling exit(:normal) the process will not finish, it will stay up&lt;/strong&gt;. Let&amp;rsquo;s demo that as well!&lt;/p&gt;
&lt;p&gt;Here is the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LinksTestNoTrap&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; chain &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;normal exit in the last link&amp;#34;&lt;/span&gt;
    exit(&lt;span style=&#34;color:#e6db74&#34;&gt;:normal&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; chain n &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;create link in a chain no. &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;n&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    spawn_link(__MODULE__, &lt;span style=&#34;color:#e6db74&#34;&gt;:chain&lt;/span&gt;, [n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      msg &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;n&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; received &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;msg&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is the demo&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/process_chain_no_break.gif&#34; alt=&#34;chain demo&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;links-are-bidirectional&#34;&gt;Links are bidirectional&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/images/3_musketeers_links.jpg&#34; alt=&#34;oracle matrix meme&#34;&gt;&lt;/p&gt;
&lt;p&gt;So far we have been killing processes that are children of other processes. The question is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: If I kill the parent, do links break then?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A: Yes, links are bidirectional&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s create a tree of processes and kill the root of that tree:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bidirectional&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; leaf name &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      msg &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; received &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;msg&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; node name &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    spawn_link __MODULE__, &lt;span style=&#34;color:#e6db74&#34;&gt;:leaf&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;node: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; first leaf&amp;#34;&lt;/span&gt;]
    spawn_link __MODULE__, &lt;span style=&#34;color:#e6db74&#34;&gt;:leaf&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;node: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; second leaf&amp;#34;&lt;/span&gt;]
    spawn_link __MODULE__, &lt;span style=&#34;color:#e6db74&#34;&gt;:leaf&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;node: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; third leaf&amp;#34;&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      msg &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; received &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;msg&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; kernel &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    spawn_link __MODULE__, &lt;span style=&#34;color:#e6db74&#34;&gt;:node&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first node&amp;#34;&lt;/span&gt;]
    spawn_link __MODULE__, &lt;span style=&#34;color:#e6db74&#34;&gt;:node&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;second node&amp;#34;&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      msg &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kernel received &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;msg&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; create_graph &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    spawn_link __MODULE__, &lt;span style=&#34;color:#e6db74&#34;&gt;:kernel&lt;/span&gt;, []
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code is fairly simple, create_graph function creates a kernel process, which spawns and link 2 node processes and each node creates 3 leafs. Then we kill the kernel PID and see what is going to happen. Hard to imagine? Let&amp;rsquo;s visualize that!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/links_on_a_tree.gif&#34; alt=&#34;bidirectional links demo&#34;&gt;&lt;/p&gt;
&lt;p&gt;Everything happens as planned and the entire tree is killed. Death of the kernel process causes a chain reaction and everything dies. Even our shell which is linked with the kernel dies as well!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>My discoveries about Elixir processes</title>
      <link>/posts/elixir-pingpong-table/</link>
      <pubDate>Thu, 22 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/posts/elixir-pingpong-table/</guid>
      <description>How did I learn about Elixir processes that is worth sharing.</description>
      <content>&lt;h3 id=&#34;books&#34;&gt;Books&lt;/h3&gt;
&lt;p&gt;Learning new language is always challenging, especially if you try to learn something completely different from most of the languages out there. Elixir is one of them, sure it looks like Ruby, but the actual power of it comes from BEAM - VM that powers Erlang programs. The basic unit of Erlang concurrency model is a process. You can learn a lot about them here and there. The thing is, books cover them in a happy path manner. It means, that if copy-paste example from book it will run fine and everyone should be happy right? Well, not exactly. Experimenting with examples is always the most valuable thing that you can do (at least in my case), so I tried, this is what I came up with.&lt;/p&gt;
&lt;h3 id=&#34;very-basic-spawn&#34;&gt;Very basic spawn&lt;/h3&gt;
&lt;p&gt;The easiest way to spawn process in BEAM is to do it from shell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; spawn(&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello from process&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)
hello from process
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.61.0&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Every resource about Elixir will have such an example. Spawn/1 (there is &lt;code&gt;spawn/3&lt;/code&gt;) runs functions in a fresh process and returns its identifier. Cool, but my questions were:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: Is this PID is a completely random number?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A: Not entirely, but you have no control over process id number. I found good &lt;a href=&#34;http://stackoverflow.com/questions/243363/can-someone-explain-the-structure-of-a-pid-in-erlang?rq=1&#34;&gt;stackoverlow answer to that one&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: Can this function take any argument?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A: No, no arguments if you run process like that. You can do it in spawn/3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: Is it a async operation, will the &amp;ldquo;spawner&amp;rdquo; wait for this process to finish?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A: Lets check:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; spawn(&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
...(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello from process&amp;#34;&lt;/span&gt;
...(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:timer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# miliseconds&lt;/span&gt;
...(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)
hello from process
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.75.0&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Shell will be available immediately, so the answer is &amp;ldquo;NO&amp;rdquo; - spawn won&amp;rsquo;t wait for this process to finish.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: So is this process even alive?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A: Lets check:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; spawn(&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello from process&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)
hello from process
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.77.0&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;alive? pid
&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So process is dead after doing its job. So the answer is: NO - this process is dead.&lt;/p&gt;
&lt;h3 id=&#34;process-inside-a-module&#34;&gt;Process inside a module&lt;/h3&gt;
&lt;p&gt;I mentioned &lt;code&gt;spawn/3&lt;/code&gt;. If you don&amp;rsquo;t know what given function does, just type &lt;code&gt;h(function/number_arguments)&lt;/code&gt; and you will see something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; h(spawn&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;Spawns&lt;/span&gt; the given module &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; function passing the given args &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; returns its
pid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;Check&lt;/span&gt; the modules &lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; other functions to handle processes,
including spawning functions &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;Inlined&lt;/span&gt; by the compiler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;Examples&lt;/span&gt;

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;┃&lt;/span&gt; spawn(&lt;span style=&#34;color:#a6e22e&#34;&gt;SomeModule&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:function&lt;/span&gt;, [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So this is straight forward. It is worth mentioning that the second argument must be an atom. And the third argument is a list of arguments, so if you want to pass a single list as an argument you need to pass &lt;code&gt;[[:items, :of, :a, :passed, :list]]&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;ping-pong-game-table&#34;&gt;Ping-pong game table&lt;/h3&gt;
&lt;p&gt;We can demonstrate some elixir processes properties during a simple exercise. Lets design a ping-pong table where each side &amp;ldquo;ping&amp;rdquo; and &amp;ldquo;pong&amp;rdquo; are going to be separate process exchanging messages. It will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+--------------+
|              |
|     iex      |
|              |
+------+-------+
       |
       |:ping
       |
+------v-------+     :pong       +--------------+
|              +-----------------&amp;gt;              |
| ping process |                 | pong process |
|              &amp;lt;-----------------+              |
+--------------+     :ping       +--------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lets define a module that spawns processes and starts interaction with them. We are going to solve this by incrementally adding code and asking bunch of noobie questions to learn as much as we can. Lets start with a basic process and a start function, we are trying to solve: &lt;em&gt;&amp;ldquo;iex&amp;rdquo; :pinging ping process&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Table&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; ping &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;received ping&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; start &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    spawn(__MODULE__, &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;, [])
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Function &lt;em&gt;start&lt;/em&gt; spawns a ping process and returns its PID. Remember, when spawning a process in module the second argument must be an &lt;strong&gt;atom&lt;/strong&gt; otherwise you can get unexpected result quite hard to debug later. In our case, if we call &lt;code&gt;spawn(__MODULE__, ping, [])&lt;/code&gt;, we would not spawn a process but call a ping function instead, which would block forever at receive statement. Fortunately we have correct implementation so we can try it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ping &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Table&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.67.0&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;alive? ping
&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;tail-recursion-keeping-process-alive&#34;&gt;Tail-recursion, keeping process alive.&lt;/h4&gt;
&lt;p&gt;It looks good, PID is alive and well. Now it is time send a message to it, lets do it a few times and realize that after sending a first message our process is dead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; send ping, &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;
received ping
&lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; send ping, &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;alive? ping
&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Process is dead because after receiving message is continues executing a function, in our case it is the &lt;em&gt;end&lt;/em&gt; statement. Adding recursive call to itself would keep ping process alive.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; ping &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 1. block here and wait for a message&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;received ping&amp;#39;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  ping &lt;span style=&#34;color:#75715e&#34;&gt;# 2. Call itself&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It should work like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;spawn(__MODULE__, :ping, [])&lt;/code&gt; - spawn ping function in separate process&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Block at receive statement &lt;strong&gt;(#1)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Receive message and call itself &lt;strong&gt;(#2)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Block at receive statement and wait for messages &lt;strong&gt;(#1)&lt;/strong&gt; and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Table&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.78.0&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; send p, &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;
received ping
&lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; send p, &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;
received ping
&lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; send p, &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;
received ping
&lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;alive? p
&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Q: This is a recursion, am I going to overflow stack in this way?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A: No, elixir uses something called tail-recursion - it basically means that elixir will convert this recursive call to a loop during compilation. We can actually check if that&amp;rsquo;s true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are going to use a tool called &lt;a href=&#34;http://www.erlang.org/doc/man/observer.html&#34;&gt;observer&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:observer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see window like this one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/erlang_vm_observer.png&#34; alt=&#34;Erlang VM observer&#34;&gt;&lt;/p&gt;
&lt;p&gt;Go ahead, click around and explore. Especially applications tab is interesting. You can peek and check process trees. Now we are ready to benchmark our ping process, we are going to call it 100M times, just type following line and go right to observer window.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Table&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.1569.0&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Stream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; send p, {self(), &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count
&lt;span style=&#34;color:#ae81ff&#34;&gt;100000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go to &lt;em&gt;Load Charts&lt;/em&gt;. Memory usage will increase at first, but it at some point it should be constant during our micro benchmark execution.
&lt;img src=&#34;/images/erlang_vm_observer_memory_usage.png&#34; alt=&#34;Erlang VM observer&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can also check in &lt;em&gt;processes&lt;/em&gt; tab how our ping process is doing.
&lt;img src=&#34;/images/erlang_vm_observer_ping_process.png&#34; alt=&#34;Erlang VM observer&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;self-or-who-am-i&#34;&gt;self() or &amp;ldquo;who am I&amp;rdquo;?&lt;/h4&gt;
&lt;p&gt;Before we begin implementating interaction between processes, lets try something new.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; self()

&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.57.0&amp;gt;&lt;/span&gt;

iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; h(self)

                                   &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; self()

&lt;span style=&#34;color:#a6e22e&#34;&gt;Returns&lt;/span&gt; the pid (process identifier) of the calling process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;Allowed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; guard clauses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Inlined&lt;/span&gt; by the compiler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What did we learn here? First of all, code that we execute in a REPL is executed in a process as well. We also know how get a PID of process that we are currently in. Lets dig a bit deeper now by sending messages to self() process in REPL, make sure you have running observer first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:observer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start
&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; self()
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.57.0&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; send self(), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; send self(), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; send self(), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; send self(), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We sent messages, but did they go? Lets check process tab in observer, sort the table by &lt;em&gt;MsgQ&lt;/em&gt; which says how many messages are waiting in queue to given process. We sent 4 messages so are looking for a process with MsgQ equals 4.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/erlang_vm_observer_self_queue.png&#34; alt=&#34;self() queue process&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can see that we sent 4 messages to self(), and queue is 4 items long. Remember, it is not permanent queue, once you kill the VM messages will be lost. Now it is time receive these messages, for this we are going to use &lt;em&gt;flush/0&lt;/em&gt; function. You can even peek what items are in queue, just double-click on a process and go to &lt;em&gt;messages&lt;/em&gt; tab.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/erlang_vm_observer_process_queue_peek.png&#34; alt=&#34;queue msgs list&#34;&gt;&lt;/p&gt;
&lt;p&gt;But how to consume messages sent to shell process?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; h(flush)

                                  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; flush()

&lt;span style=&#34;color:#a6e22e&#34;&gt;Flushes&lt;/span&gt; all messages sent to the shell &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; prints them out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; flush
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No that we know a bit more about self function, lets try it in our ping-pong table!&lt;/p&gt;
&lt;h4 id=&#34;sending-messages-back-and-forth-between-processes&#34;&gt;Sending messages back and forth between processes&lt;/h4&gt;
&lt;p&gt;By far we were receiving messages in a process, but to we didn&amp;rsquo;t send any messages back yet. &lt;em&gt;IO.puts&lt;/em&gt; is a useful function, but we want our process to communicate. Lets try example below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Table&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; ping &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      {from, &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#1&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ping process reached, going to respond with :pong&amp;#39;&lt;/span&gt;
        send from, {self(), &lt;span style=&#34;color:#e6db74&#34;&gt;:pong&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;#2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    ping
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; start &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    spawn(__MODULE__, &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;, [])
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We changed the way what we receive in &lt;em&gt;#1&lt;/em&gt;, instead expecting a &lt;em&gt;:ping&lt;/em&gt; atom we wait for a tuple &lt;em&gt;{from, :ping}&lt;/em&gt;. It means, that we will know not only that someone sends us :ping, but also who is sending it. In &lt;em&gt;#2&lt;/em&gt; we respond in the same manner, we send a tuple &lt;em&gt;back to the sender&lt;/em&gt; of the :ping atom, but also with the information who is sending it - the ping process - self(). Now, since we know how self() works, we can test our ping process from a shell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Table&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start
&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.80.0&amp;gt;  #1&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; send(p, {self(), &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;}) &lt;span style=&#34;color:#75715e&#34;&gt;#2&lt;/span&gt;
ping process reached, going to respond with &lt;span style=&#34;color:#e6db74&#34;&gt;:pong&lt;/span&gt;
{&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.57.0&amp;gt;, :ping} #3&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; flush
{&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.80.0&amp;gt;, :pong}  #4&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First we spawn ping process in start function &lt;em&gt;#1&lt;/em&gt;, it returns a PID 0.80.0 of the ping process. Then we send tuple of &lt;em&gt;{self, :ping}&lt;/em&gt; to ping process (&lt;em&gt;#2&lt;/em&gt;), at &lt;em&gt;#3&lt;/em&gt; we can see what has been sent. The &lt;em&gt;#4&lt;/em&gt; is the message sent back from ping process. We are very close to the finish now. All we have to do, is to create similar function to ping process called &lt;em&gt;pong&lt;/em&gt;. Example bellow does the job.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Table&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; ping &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      {from, &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ping process reached, going to respond with :pong&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;:timer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
        send from, {self(), &lt;span style=&#34;color:#e6db74&#34;&gt;:pong&lt;/span&gt;}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    ping
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; pong &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      {from, &lt;span style=&#34;color:#e6db74&#34;&gt;:pong&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#2&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pong process reached, going to respond with :ping&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;:timer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#4&lt;/span&gt;
        send from, {self(), &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;#3&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    pong
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; start &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    ping_pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; spawn __MODULE__, &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;, []
    pong_pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; spawn __MODULE__, &lt;span style=&#34;color:#e6db74&#34;&gt;:pong&lt;/span&gt;, [] &lt;span style=&#34;color:#75715e&#34;&gt;#5&lt;/span&gt;
    {ping_pid, pong_pid}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The pong function (&lt;em&gt;#1&lt;/em&gt;) is very similar to the ping one. The main difference is that we expect &lt;em&gt;:pong&lt;/em&gt; instead of :ping atom (&lt;em&gt;#2&lt;/em&gt;) and we respond with &lt;em&gt;:ping&lt;/em&gt; - not :pong (&lt;em&gt;#3&lt;/em&gt;). I also put a &lt;em&gt;:timer.sleep(1000)&lt;/em&gt; to hold execution for a 1 second (&lt;em&gt;#4&lt;/em&gt;), just to avoid flooding ourselves with messages. If you want to call some code from standard Erlang library, just use it like &lt;em&gt;:module_name.function&lt;/em&gt;. We also had to add &lt;em&gt;pong_pid = spawn &lt;strong&gt;MODULE&lt;/strong&gt;, :pong, []&lt;/em&gt; in &lt;em&gt;#5&lt;/em&gt; to actually create a pong process, lets play with what we have.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {ping, pong} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Table&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start &lt;span style=&#34;color:#75715e&#34;&gt;#1&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; send ping, {pong, &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;#2&lt;/span&gt;
ping process reached, going to respond with &lt;span style=&#34;color:#e6db74&#34;&gt;:pong&lt;/span&gt;
{&lt;span style=&#34;color:#75715e&#34;&gt;#PID&amp;lt;0.13059.0&amp;gt;, :ping}&lt;/span&gt;
pong process reached, going to respond with &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;
ping process reached, going to respond with &lt;span style=&#34;color:#e6db74&#34;&gt;:pong&lt;/span&gt;
pong process reached, going to respond with &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;
ping process reached, going to respond with &lt;span style=&#34;color:#e6db74&#34;&gt;:pong&lt;/span&gt;
pong process reached, going to respond with &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;
ping process reached, going to respond with &lt;span style=&#34;color:#e6db74&#34;&gt;:pong&lt;/span&gt;
pong process reached, going to respond with &lt;span style=&#34;color:#e6db74&#34;&gt;:ping&lt;/span&gt;
ping process reached, going to respond with &lt;span style=&#34;color:#e6db74&#34;&gt;:pong&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At &lt;em&gt;#1&lt;/em&gt; we pattern match what &lt;em&gt;Table.start&lt;/em&gt; function returns - &lt;em&gt;{ping, pong}&lt;/em&gt; PIDs. Now it might get a bit confusing, we send &lt;em&gt;{pong, :ping}&lt;/em&gt; to &lt;em&gt;ping&lt;/em&gt; - why didn&amp;rsquo;t we send &lt;em&gt;{self, :ping}&lt;/em&gt; like before? It is because we want ping process to think that pong is sending the message, so we to have lie to ping process at first, remember that graph?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+--------------+
|              |
|     iex      |
|              |
+------+-------+
       |
       |{pong_pid, :ping} we do it first because in {from, :ping} - from must be pong PID!
       |
+------v-------+  {self, :pong}  +--------------+
|              +-----------------&amp;gt;              |
| ping process |                 | pong process |
|              &amp;lt;-----------------+              |
+--------------+  {self, :pong}  +--------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Eureka! We finish the PingPong table exercise!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: But how to stop this &amp;ldquo;printing pong process reached, going to respond with :ping&amp;rdquo; ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A: Just kill one of the process - ping or pong.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is easy, first check: &lt;a href=&#34;http://elixir-lang.org/docs/v1.0/elixir/Process.html#exit/2&#34;&gt;http://elixir-lang.org/docs/v1.0/elixir/Process.html#exit/2&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(ping, &lt;span style=&#34;color:#e6db74&#34;&gt;:kill&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, ping is dead, but pong should be still alive, lets check it&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;alive? pong
&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
iex(&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;alive? ping
&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That is it, hope you learned something new!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Boto, s3 and remote metadata</title>
      <link>/posts/boto-s3-and-remote-metadata/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/posts/boto-s3-and-remote-metadata/</guid>
      <description>Setting remote metadata for files on s3 might be tricky, lets take a peek</description>
      <content>&lt;p&gt;Using boto to store files on s3 might be a little bit confusing when it comes to store metadata for files. Normally you would expect that &lt;code&gt;key.set_metadata&lt;/code&gt; saves data remotely on s3. In fact &lt;code&gt;set_metadata&lt;/code&gt; stores your keys locally in python dict.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; bucket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new_key(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;testing-file&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_contents_from_string(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;testing content&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_metadata(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;from metadata&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_metadata(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;from metadata&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In example above you can get metadata form key instance, but what if you get your file from s3 again? Metadata will be a empty dict.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_metadata(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; True&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;set_remote_metadata&lt;/code&gt; is the method you probably are looking for.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_remote_metadata&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;
Type:       instancemethod
String Form:&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;bound ey:&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_remote_metadata&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; of&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; testing&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;gt;
File:       &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;boto&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;s3&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
Definition: key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_remote_metadata(self, metadata_plus, metadata_minus, preserve_acl, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None)
Docstring:  no docstring&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Interface to that method is more then weird but it does the job.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bucket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_key(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;testing-file&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_remote_metadata({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;this is remote metadata&amp;#39;&lt;/span&gt;}, {}, True)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; remote_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bucket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_key(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;testing-file&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; remote_key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;metadata
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;this is remote metadata&amp;#39;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In fact boto stores files metadata in headers by adding &lt;!-- raw HTML omitted --&gt;x-amx-meta&lt;!-- raw HTML omitted --&gt; prefix, you can check that by downloading file directly.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://you_bucket.s3.amazonaws.com/testing-file&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x-amz-meta-hello&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; this &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; remote metadata&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;If you want to update file headers without meta prefix, you can do it easily:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_remote_metadata({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;custom/type&amp;#39;&lt;/span&gt;}, {}, True)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://{}.s3.amazonaws.com/testing-file&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;custom/type&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
